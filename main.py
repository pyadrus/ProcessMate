# fastapi_app/main.py
import json
import uvicorn
from fastapi import FastAPI, Request, responses
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from loguru import logger

from formation.formation_of_reports import formation_of_reports
from formation.formation_of_surcharges import formation_of_surcharges, formation_of_surcharges_1
from formation.formation_the_payroll import formation_the_payroll
from formation.summary_by_types_and_categories import summary_by_types_and_categories
from formation.tabel_21012 import tabel
from formation.transfer_profession import transfer_prof
from launch_program import launch_program

app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
templates = Jinja2Templates(directory="templates")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
def get_data_from_json():
    with open('data/tab_2024.json', 'r', encoding='utf-8') as file:
        return json.load(file)

dist_list = get_data_from_json()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def read_root(request: Request):
    return templates.TemplateResponse(
        "index.html",
        {
            "request": request,
            "buttons": [
                {"name": "–ö–®–î", "endpoint": "/transfer-prof"},
                {"name": "BZ 14", "endpoint": "/summary"},
                {"name": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–ø–æ—Ä—Ç–æ–≤", "endpoint": "/formation-reports"},
                {"name": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–µ–ª—è", "endpoint": "/tabel"},
                {"name": "–î–æ–ø–ª–∞—Ç—ã", "endpoint": "/additional-payments"},
                {"name": "–î–æ–ø–ª–∞—Ç—ã 130, 410", "endpoint": "/additional-payments-1"},
                {"name": "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞", "endpoint": "/payroll"},
                {"name": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", "endpoint": "/launch"},
            ]
        }
    )

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–ø–æ—Ä—Ç–æ–≤
@app.post("/formation-reports")
async def handle_formation_reports():
    try:
        formation_of_reports(dist_list)
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–µ–ª—è
@app.post("/tabel")
async def handle_tabel():
    try:
        tabel(dist_list)
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–ª–∞—Ç 124, 164
@app.post("/additional-payments")
async def handle_additional_payments():
    try:
        formation_of_surcharges()
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–ª–∞—Ç 130, 140
@app.post("/additional-payments-1")
async def handle_additional_payments_1():
    try:
        formation_of_surcharges_1()
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞
@app.post("/payroll")
async def handle_payroll():
    try:
        formation_the_payroll()
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# –ö–®–î
@app.post("/transfer-prof")
async def handle_transfer_prof():
    try:
        transfer_prof()
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# BZ 14
@app.post("/summary")
async def handle_summary():
    try:
        summary_by_types_and_categories()
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@app.post("/launch")
async def handle_launch():
    try:
        launch_program()
        return responses.JSONResponse({"status": "success"})
    except Exception as e:
        logger.exception(e)
        return responses.JSONResponse({"status": "error", "error": str(e)}, status_code=500)

# üî• –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000, log_level="info")